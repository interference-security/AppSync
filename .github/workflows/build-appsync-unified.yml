name: Build AppSync Unified

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main
  workflow_dispatch:  # Enables manual triggering

jobs:
  build:
    runs-on: macos-12  # Use macOS 12 with Xcode 14

    steps:
      # Step 1: Checkout the AppSync Unified repository
      - name: Checkout AppSync Unified repository
        uses: actions/checkout@v3

      # Step 2: Install dependencies via Homebrew
      - name: Install dependencies via Homebrew
        run: |
          brew update
          brew install dpkg ldid

      # Step 3: Install Theos (checkout specific commit e045ac7)
      - name: Install Theos at specific commit e045ac7
        run: |
          mkdir -p $HOME/theos  # Create the theos directory if it doesn't exist
          echo $HOME
          bash -c "$(curl -fsSL https://gist.githubusercontent.com/interference-security/f086374076015b3bec0ac84854f8158a/raw/866d6f56649d82c9deabf58748768dcb1d8d51bb/install-theos-mod.sh)"
          git clone https://github.com/theos/theos.git $HOME/theos  # Clone Theos into the directory
          git -C $HOME/theos checkout e045ac7  # Checkout the specific commit
          git -C $HOME/theos submodule update --init --recursive
        env:
          THEOS: $HOME/theos

      # Step 4: Set up Theos environment variables
      - name: Set up Theos environment
        run: |
          echo "THEOS=$HOME/theos" >> $GITHUB_ENV
          echo "$THEOS/bin" >> $GITHUB_PATH

      # Step 5: Verify Xcode and Swift versions (optional)
      - name: Verify Xcode and Swift versions
        run: |
          xcodebuild -version
          swift --version

      # Step 6: Build AppSync Unified
      - name: Build AppSync Unified
        run: |
          make
          make package

      # Step 7: Find the generated AppSync Unified *.deb files and TAR them
      - name: Find generated AppSync Unified *.deb files
        id: find_deb
        run: |
          #deb_path=$(find . -type f -name 'ai.akemi.appsyncunified*_iphoneos-arm.deb') # | head -n 1)
          #if [ -z "$deb_path" ]; then
          #  echo "No .deb file found."
          #  exit 1
          #fi
          #echo "deb_path=$deb_path" >> $GITHUB_ENV
          find . -type f -name '*.deb'
          tar cvf appsync-unified-debs.tar ./debs/*
          readlink -f appsync-unified-debs.tar
          deb_path="appsync-unified-debs.tar"
          echo "deb_path=$deb_path" >> $GITHUB_ENV

      # Step 8: Upload the generated AppSync Unified *.deb as an artifact
      - name: Upload AppSync Unified DEB Files Artifact
        if: env.deb_path != ''
        uses: actions/upload-artifact@v4
        id: artifact-upload-step
        with:
          name: AppSync-Unified
          path: ${{ env.deb_path }}

      # Step 9: Build AppInst
      - name: Build AppInst
        run: |
          cd appinst
          #cp libzip.a $THEOS/libs/
          make
          make package

      # Step 10: Find the generated AppInst *.deb files and TAR them
      - name: Find generated AppInst *.deb files
        id: find_deb_appinst
        run: |
          #deb_path=$(find . -type f -name 'ai.akemi.appsyncunified*_iphoneos-arm.deb') # | head -n 1)
          #if [ -z "$deb_path" ]; then
          #  echo "No .deb file found."
          #  exit 1
          #fi
          #echo "deb_path=$deb_path" >> $GITHUB_ENV
          cd appinst
          find . -type f -name '*.deb'
          tar cvf appsync-unified-appinst-debs.tar ./debs/*
          readlink -f appsync-unified-appinst-debs.tar
          #deb_path_appinst="appsync-unified-appinst-debs.tar"
          deb_path_appinst=$(readlink -f appsync-unified-appinst-debs.tar)
          echo "deb_path_appinst=$deb_path_appinst" >> $GITHUB_ENV

      # Step 11: Upload the generated AppInst *.deb as an artifact
      - name: Upload AppInst DEB Files Artifact
        if: env.deb_path_appinst != ''
        uses: actions/upload-artifact@v4
        id: artifact-upload-step-appinst
        with:
          name: AppSync-Unified-Appinst
          path: ${{ env.deb_path_appinst }}


      #- name: Output artifact URL
      #  run: echo 'Artifact URL is ${{ steps.artifact-upload-step.outputs.artifact-url }}'

      # Step 9: Download the uploaded artifact (for demonstration purposes)
      #- name: Download Artifact
      #  uses: actions/download-artifact@v3
      #  with:
      #    name: AppSync-Unified
      #    path: $HOME/downloads  # Specify a path to download the artifact
